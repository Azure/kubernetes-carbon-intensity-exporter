name: Run e2e test

concurrency:
  group:  ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  # Common versions
  GO_VERSION: '1.19'

  SERVER_IMG_TAG : '0.1.0'
  EXPORTER_IMG_TAG: '0.1.0'

jobs:
  export-registry:
    runs-on: ubuntu-20.04
    outputs:
      registry: ${{ steps.export.outputs.registry }}
    steps:
      - id: export
        run: |
          # registry must be in lowercase
          echo "registry=$(echo "${{ env.REGISTRY }}/${{ github.repository }}" | tr [:upper:] [:lower:])" >> $GITHUB_OUTPUT

  e2e-test:
    runs-on: ubuntu-20.04
    needs:
      - export-registry
    env:
      REGISTRY: ${{ needs.export-registry.outputs.registry }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0
      - name: Login to ${{ env.REGISTRY }}
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: install kubectl
        uses: azure/setup-kubectl@v3
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.4.0
        with:
          cluster_name: "carbon"
      - name: Run e2e test
        run: |
          make docker-build-server-image docker-build-exporter-image
          kind load docker-image -n carbon ${{ env.REGISTRY }}/server:${{ env.SERVER_IMG_TAG }}
          kind load docker-image -n carbon ${{ env.REGISTRY }}/exporter:${{ env.EXPORTER_IMG_TAG }}
          kubectl apply -f deploy/carbon-aware.yaml
          sleep 20
          kubectl wait --for=condition=available deploy carbon-aware --timeout=300s
          sleep 20
          kubectl logs $(echo $(kubectl get pods --output=jsonpath={.items..metadata.name})) -c carbon-data-exporter
        env:
          SERVER_IMG_TAG: ${{ env.SERVER_IMG_TAG }}
          EXPORTER_IMG_TAG: ${{ env.EXPORTER_IMG_TAG }}
